Dev Console Controller
   This Controller enables executing custom code snippets in the same JVM. It is different from bootman in following respect:
   1. It does not change existing code behavior by injecting any code
   2. It does not affect any running requests
   3. It simply allows you to use existing code construct and check the output. Very similar to Chrome browser's developer console. You can think of it as a Universal Spring Controller where any functionality (including private method of a class or a Spring bean can be executed)

Features:
1. supports running arbitrary code in javascript (ECMA 5.x) and groovy syntax
2. groovy scripting is more powerful as it enables execution of private methods and fields. The equivalent javascript code requires usage of Reflection.
3. Supports Spring beans as a first class citizen in the Scripting Engine context

Run following examples in DevConsole Controller's /devConsole/execute/{language} POST based endpoint:

# execute the sayHello() public method of helloController spring bean. This works in both javascript and Groovy
externalName = helloController.sayHello('John Ext Doe');

# execute the sayHelloInternal() private method of helloController spring bean using Groovy
internalName = helloController.sayHelloInternal('John Int Doe');

Groovy scripting supports execution of private methods as well without using reflection.

# execute the sayHelloInternal() private method of helloController spring bean using javascript. This requires reflection.
var method = helloController.class.getDeclaredMethod("sayHelloInternal", java.lang.String.class);
method.setAccessible(true);
internalName = method.invoke(helloController, 'John Int Doe');

#We don't have to restrict it to single code liners. You can execute any code block as long as it is supported by Groovy/javascript dialect.
#The following returns a map of two method calls, one private and one public from javascript
var method = helloController.class.getDeclaredMethod("sayHelloInternal", java.lang.String.class);
method.setAccessible(true);
var internalName = method.invoke(helloController, 'John Int Doe');
var externalName = helloController.sayHello('John Ext Doe');
var nameMap = {
  internalName : internalName,
  externalName : externalName
 }
nameMap;


#The same functionality as above, called from Groovy. Notice how simple it is compared to javascript based invocation.
internalName = helloController.sayHelloInternal('John Int Doe');
externalName = helloController.sayHello('John Ext Doe');
[
  'internalName' : internalName,
  'externalName' : externalName
]


